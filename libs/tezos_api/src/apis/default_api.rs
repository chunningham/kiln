/*
 * Tezos RPC
 *
 * Tezos client RPC API.
 *
 * The version of the OpenAPI document: 7.5
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};


/// struct for typed errors of method `context_big_maps_big_map_id_script_expr_get`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ContextBigMapsBigMapIdScriptExprGetError {DefaultResponse(serde_json::Value),
    UnknownValue(serde_json::Value),
}


/// Access the value associated with a key in a big map.
pub async fn context_big_maps_big_map_id_script_expr_get(configuration: &configuration::Configuration, big_map_id: &str, script_expr: &str) -> Result<crate::models::Micheline007PsDelph1MichelsonV1Expression, Error<ContextBigMapsBigMapIdScriptExprGetError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/context/big_maps/{big_map_id}/{script_expr}", configuration.base_path, big_map_id=crate::apis::urlencode(big_map_id), script_expr=crate::apis::urlencode(script_expr));
    let mut local_var_req_builder = local_var_client.get(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if local_var_status.is_success() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ContextBigMapsBigMapIdScriptExprGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

