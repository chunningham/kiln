/*
 * Tezos RPC
 *
 * Tezos client RPC API.
 *
 * The version of the OpenAPI document: 7.5
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Model007PsDelph1OperationAlphaOperationContentsAndResult {
    #[serde(rename = "kind")]
    pub kind: Kind,
    #[serde(rename = "level")]
    pub level: i32,
    #[serde(rename = "metadata")]
    pub metadata: crate::models::Delegation2Metadata,
    #[serde(rename = "nonce")]
    pub nonce: String,
    #[serde(rename = "op1")]
    pub op1: crate::models::Model007PsDelph1InlinedEndorsement,
    #[serde(rename = "op2")]
    pub op2: crate::models::Model007PsDelph1InlinedEndorsement,
    #[serde(rename = "bh1")]
    pub bh1: crate::models::Model007PsDelph1BlockHeaderAlphaFullHeader,
    #[serde(rename = "bh2")]
    pub bh2: crate::models::Model007PsDelph1BlockHeaderAlphaFullHeader,
    #[serde(rename = "pkh")]
    pub pkh: crate::models::Ed25519PublicKeyHash,
    #[serde(rename = "secret")]
    pub secret: String,
    #[serde(rename = "source")]
    pub source: crate::models::SignaturePublicKeyHash,
    #[serde(rename = "period")]
    pub period: i32,
    #[serde(rename = "proposals")]
    pub proposals: Vec<crate::models::ProtocolHash>,
    #[serde(rename = "proposal")]
    pub proposal: crate::models::ProtocolHash,
    #[serde(rename = "ballot")]
    pub ballot: Ballot,
    /// Decimal representation of a positive big number
    #[serde(rename = "fee")]
    pub fee: String,
    /// Decimal representation of a positive big number
    #[serde(rename = "counter")]
    pub counter: String,
    /// Decimal representation of a positive big number
    #[serde(rename = "gas_limit")]
    pub gas_limit: String,
    /// Decimal representation of a positive big number
    #[serde(rename = "storage_limit")]
    pub storage_limit: String,
    #[serde(rename = "public_key")]
    pub public_key: crate::models::SignaturePublicKey,
    /// Decimal representation of a positive big number
    #[serde(rename = "amount")]
    pub amount: String,
    #[serde(rename = "destination")]
    pub destination: crate::models::Model007PsDelph1ContractId,
    #[serde(rename = "parameters", skip_serializing_if = "Option::is_none")]
    pub parameters: Option<crate::models::TransactionParameters>,
    /// Decimal representation of a positive big number
    #[serde(rename = "balance")]
    pub balance: String,
    #[serde(rename = "delegate", skip_serializing_if = "Option::is_none")]
    pub delegate: Option<crate::models::SignaturePublicKeyHash>,
    #[serde(rename = "script")]
    pub script: crate::models::Model007PsDelph1ScriptedContracts,
}

impl Model007PsDelph1OperationAlphaOperationContentsAndResult {
    pub fn new(kind: Kind, level: i32, metadata: crate::models::Delegation2Metadata, nonce: String, op1: crate::models::Model007PsDelph1InlinedEndorsement, op2: crate::models::Model007PsDelph1InlinedEndorsement, bh1: crate::models::Model007PsDelph1BlockHeaderAlphaFullHeader, bh2: crate::models::Model007PsDelph1BlockHeaderAlphaFullHeader, pkh: crate::models::Ed25519PublicKeyHash, secret: String, source: crate::models::SignaturePublicKeyHash, period: i32, proposals: Vec<crate::models::ProtocolHash>, proposal: crate::models::ProtocolHash, ballot: Ballot, fee: String, counter: String, gas_limit: String, storage_limit: String, public_key: crate::models::SignaturePublicKey, amount: String, destination: crate::models::Model007PsDelph1ContractId, balance: String, script: crate::models::Model007PsDelph1ScriptedContracts) -> Model007PsDelph1OperationAlphaOperationContentsAndResult {
        Model007PsDelph1OperationAlphaOperationContentsAndResult {
            kind,
            level,
            metadata,
            nonce,
            op1,
            op2,
            bh1,
            bh2,
            pkh,
            secret,
            source,
            period,
            proposals,
            proposal,
            ballot,
            fee,
            counter,
            gas_limit,
            storage_limit,
            public_key,
            amount,
            destination,
            parameters: None,
            balance,
            delegate: None,
            script,
        }
    }
}

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Kind {
    #[serde(rename = "delegation")]
    Delegation,
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Ballot {
    #[serde(rename = "nay")]
    Nay,
    #[serde(rename = "yay")]
    Yay,
    #[serde(rename = "pass")]
    Pass,
}

