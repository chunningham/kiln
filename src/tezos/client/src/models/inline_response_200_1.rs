/*
 * Tezos RPC
 *
 * Tezos client RPC API.
 *
 * The version of the OpenAPI document: 7.5
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct InlineResponse2001 {
    #[serde(rename = "proof_of_work_nonce_size")]
    pub proof_of_work_nonce_size: i32,
    #[serde(rename = "nonce_length")]
    pub nonce_length: i32,
    #[serde(rename = "max_anon_ops_per_block")]
    pub max_anon_ops_per_block: i32,
    #[serde(rename = "max_operation_data_length")]
    pub max_operation_data_length: i32,
    #[serde(rename = "max_proposals_per_delegate")]
    pub max_proposals_per_delegate: i32,
    #[serde(rename = "preserved_cycles")]
    pub preserved_cycles: i32,
    #[serde(rename = "blocks_per_cycle")]
    pub blocks_per_cycle: i32,
    #[serde(rename = "blocks_per_commitment")]
    pub blocks_per_commitment: i32,
    #[serde(rename = "blocks_per_roll_snapshot")]
    pub blocks_per_roll_snapshot: i32,
    #[serde(rename = "blocks_per_voting_period")]
    pub blocks_per_voting_period: i32,
    #[serde(rename = "time_between_blocks")]
    pub time_between_blocks: Vec<String>,
    #[serde(rename = "endorsers_per_block")]
    pub endorsers_per_block: i32,
    /// Decimal representation of a big number
    #[serde(rename = "hard_gas_limit_per_operation")]
    pub hard_gas_limit_per_operation: String,
    /// Decimal representation of a big number
    #[serde(rename = "hard_gas_limit_per_block")]
    pub hard_gas_limit_per_block: String,
    /// Decimal representation of 64 bit integers
    #[serde(rename = "proof_of_work_threshold")]
    pub proof_of_work_threshold: String,
    /// Decimal representation of a positive big number
    #[serde(rename = "tokens_per_roll")]
    pub tokens_per_roll: String,
    #[serde(rename = "michelson_maximum_type_size")]
    pub michelson_maximum_type_size: i32,
    /// Decimal representation of a positive big number
    #[serde(rename = "seed_nonce_revelation_tip")]
    pub seed_nonce_revelation_tip: String,
    #[serde(rename = "origination_size")]
    pub origination_size: i32,
    /// Decimal representation of a positive big number
    #[serde(rename = "block_security_deposit")]
    pub block_security_deposit: String,
    /// Decimal representation of a positive big number
    #[serde(rename = "endorsement_security_deposit")]
    pub endorsement_security_deposit: String,
    #[serde(rename = "baking_reward_per_endorsement")]
    pub baking_reward_per_endorsement: Vec<String>,
    #[serde(rename = "endorsement_reward")]
    pub endorsement_reward: Vec<String>,
    /// Decimal representation of a positive big number
    #[serde(rename = "cost_per_byte")]
    pub cost_per_byte: String,
    /// Decimal representation of a big number
    #[serde(rename = "hard_storage_limit_per_operation")]
    pub hard_storage_limit_per_operation: String,
    /// Decimal representation of 64 bit integers
    #[serde(rename = "test_chain_duration")]
    pub test_chain_duration: String,
    #[serde(rename = "quorum_min")]
    pub quorum_min: i32,
    #[serde(rename = "quorum_max")]
    pub quorum_max: i32,
    #[serde(rename = "min_proposal_quorum")]
    pub min_proposal_quorum: i32,
    #[serde(rename = "initial_endorsers")]
    pub initial_endorsers: i32,
    /// Decimal representation of 64 bit integers
    #[serde(rename = "delay_per_missing_endorsement")]
    pub delay_per_missing_endorsement: String,
}

impl InlineResponse2001 {
    pub fn new(proof_of_work_nonce_size: i32, nonce_length: i32, max_anon_ops_per_block: i32, max_operation_data_length: i32, max_proposals_per_delegate: i32, preserved_cycles: i32, blocks_per_cycle: i32, blocks_per_commitment: i32, blocks_per_roll_snapshot: i32, blocks_per_voting_period: i32, time_between_blocks: Vec<String>, endorsers_per_block: i32, hard_gas_limit_per_operation: String, hard_gas_limit_per_block: String, proof_of_work_threshold: String, tokens_per_roll: String, michelson_maximum_type_size: i32, seed_nonce_revelation_tip: String, origination_size: i32, block_security_deposit: String, endorsement_security_deposit: String, baking_reward_per_endorsement: Vec<String>, endorsement_reward: Vec<String>, cost_per_byte: String, hard_storage_limit_per_operation: String, test_chain_duration: String, quorum_min: i32, quorum_max: i32, min_proposal_quorum: i32, initial_endorsers: i32, delay_per_missing_endorsement: String) -> InlineResponse2001 {
        InlineResponse2001 {
            proof_of_work_nonce_size,
            nonce_length,
            max_anon_ops_per_block,
            max_operation_data_length,
            max_proposals_per_delegate,
            preserved_cycles,
            blocks_per_cycle,
            blocks_per_commitment,
            blocks_per_roll_snapshot,
            blocks_per_voting_period,
            time_between_blocks,
            endorsers_per_block,
            hard_gas_limit_per_operation,
            hard_gas_limit_per_block,
            proof_of_work_threshold,
            tokens_per_roll,
            michelson_maximum_type_size,
            seed_nonce_revelation_tip,
            origination_size,
            block_security_deposit,
            endorsement_security_deposit,
            baking_reward_per_endorsement,
            endorsement_reward,
            cost_per_byte,
            hard_storage_limit_per_operation,
            test_chain_duration,
            quorum_min,
            quorum_max,
            min_proposal_quorum,
            initial_endorsers,
            delay_per_missing_endorsement,
        }
    }
}


